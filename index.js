const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

const app = express();
const PORT = 3000;

app.use(cors());
app.use(express.json());

const { v4: uuidv4 } = require('uuid');

mongoose.connect('mongodb://localhost:27017/amazon-clone')
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((err) => {
    console.error('Error connecting to MongoDB:', err);
  });

// const Product = mongoose.model('Product', new mongoose.Schema({
//   id:Number,  
//   name: String,
//   price: Number,
//   description: String
// }));

const productSchema = new mongoose.Schema({
    productId: { type: String, required: true, unique: true },
    name: { type: String, required: true },
    price: { type: Number, required: true },
    description: { type: String }
  });

  const Product = mongoose.model('Product', productSchema); //creates a collection named products in mongodb database:amazon-clone
 
const cartSchema = new mongoose.Schema({
  name: String,
  price: Number,
  description: String
})

const Cart = mongoose.model('cart',cartSchema)

app.get('/api/products', async (req, res) => {
  try {
    const products = await Product.find();
    res.json(products);
  } catch (error) {
    console.error('Error fetching products:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});



app.get('/api/products/:productId', async (req, res) => {
    try {
      const productId = req.params.productId; // Retrieve product ID from URL parameter

    //if we want to search by productId feild ,which was generated by uuid.
     // const product = await Product.find({ productId }); 
   
      //if we want to search by _id ,the default id of mongodb
     const product = await Product.findById(productId);
      
      if (!product) {
        return res.status(404).json({ error: 'Product not found' });
      } 
  
      res.json(product);
    } catch (error) {
      console.error('Error fetching product:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }); 

app.post('/api/products', async (req, res) => {
  try {
    const productId = uuidv4(); // Generate UUID
    const productData = { productId, ...req.body };
  
    const product = new Product(productData);
    await product.save();
    res.json(product);
  } catch (error) {
    console.error('Error creating product:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.get('/api/cart', async (req,res)=>{
  try{
    const cartItems = await Cart.find();
    res.json(cartItems)
  }catch(error)
  {
    console.error('Error fetching cart:',error)
    res.send(500).json({error:'Internal server error'})
  }
})

app.post('/api/cart', async (req,res)=>{
  try{
    const cartData = req.body

    const cart = new cart(cartData)
    await cart.save();
    res.json(cart)
  }catch(error){
    console.error('Error adding Product to cart:',error)
    res.status(500).json({error:'Internal server error'})
  }
}
)

app.delete('/api/deleteProduct/:productId', async (req, res) => {
    try {
      const productId = req.params.productId;
      const deletedProduct = await Product.findByIdAndDelete(productId);
  
      if (!deletedProduct) {
        return res.status(404).json({ error: 'Product not found' });
      }
  
      res.json({ message: 'Product deleted successfully', deletedProduct });
    } catch (error) {
      console.error('Error deleting product:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
  


  
  

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
